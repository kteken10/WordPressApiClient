[
    {
        "label": "WordPressApiClient",
        "importPath": "client",
        "description": "client",
        "isExtraImport": true,
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "WordPressApiClient",
        "importPath": "client",
        "description": "client",
        "isExtraImport": true,
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "WordPressApiClient",
        "importPath": "client",
        "description": "client",
        "isExtraImport": true,
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PagesEndpoint",
        "importPath": "endpoints.pages",
        "description": "endpoints.pages",
        "isExtraImport": true,
        "detail": "endpoints.pages",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "ui.button",
        "description": "ui.button",
        "isExtraImport": true,
        "detail": "ui.button",
        "documentation": {}
    },
    {
        "label": "ButtonContainer",
        "importPath": "ui.button",
        "description": "ui.button",
        "isExtraImport": true,
        "detail": "ui.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "ui.button",
        "description": "ui.button",
        "isExtraImport": true,
        "detail": "ui.button",
        "documentation": {}
    },
    {
        "label": "ButtonContainer",
        "importPath": "ui.button",
        "description": "ui.button",
        "isExtraImport": true,
        "detail": "ui.button",
        "documentation": {}
    },
    {
        "label": "PostsEndpoint",
        "importPath": "endpoints.posts",
        "description": "endpoints.posts",
        "isExtraImport": true,
        "detail": "endpoints.posts",
        "documentation": {}
    },
    {
        "label": "HTMLElement",
        "importPath": "ui.element",
        "description": "ui.element",
        "isExtraImport": true,
        "detail": "ui.element",
        "documentation": {}
    },
    {
        "label": "HTMLElement",
        "importPath": "ui.element",
        "description": "ui.element",
        "isExtraImport": true,
        "detail": "ui.element",
        "documentation": {}
    },
    {
        "label": "HTMLElement",
        "importPath": "ui.element",
        "description": "ui.element",
        "isExtraImport": true,
        "detail": "ui.element",
        "documentation": {}
    },
    {
        "label": "HTMLElement",
        "importPath": "ui.element",
        "description": "ui.element",
        "isExtraImport": true,
        "detail": "ui.element",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "HTTPBasicAuth",
        "importPath": "requests.auth",
        "description": "requests.auth",
        "isExtraImport": true,
        "detail": "requests.auth",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get_auth",
        "importPath": "auth",
        "description": "auth",
        "isExtraImport": true,
        "detail": "auth",
        "documentation": {}
    },
    {
        "label": "create_page_with_buttons",
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "isExtraImport": true,
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "delete_page",
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "isExtraImport": true,
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "list_all_pages",
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "isExtraImport": true,
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "modify_existing_page",
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "isExtraImport": true,
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "PagesEndpoint",
        "kind": 6,
        "importPath": "endpoints.pages",
        "description": "endpoints.pages",
        "peekOfCode": "class PagesEndpoint:\n    def __init__(self, client: WordPressApiClient):\n        self.client = client\n    def create_page(self, title, content, status):\n        \"\"\"\n        Crée une page dans WordPress.\n        :param title: Le titre de la page.\n        :param content: Le contenu HTML de la page.\n        :param status: Le statut de publication (e.g., \"publish\", \"draft\").\n        :return: La réponse de l'API WordPress.",
        "detail": "endpoints.pages",
        "documentation": {}
    },
    {
        "label": "PostsEndpoint",
        "kind": 6,
        "importPath": "endpoints.posts",
        "description": "endpoints.posts",
        "peekOfCode": "class PostsEndpoint:\n    def __init__(self, client: WordPressApiClient):\n        self.client = client\n    def create_post(self, title, content, status):\n        \"\"\"\n        Crée un nouvel article dans WordPress.\n        :param title: Le titre de l'article.\n        :param content: Le contenu HTML de l'article.\n        :param status: Le statut de publication (e.g., \"publish\", \"draft\").\n        :return: La réponse de l'API WordPress.",
        "detail": "endpoints.posts",
        "documentation": {}
    },
    {
        "label": "connect_to_db",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def connect_to_db():\n    conn = sqlite3.connect('pages.db')\n    return conn\n# Fonction pour créer la table si elle n'existe pas\ndef create_table():\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    cursor.execute(''' \n    CREATE TABLE IF NOT EXISTS pages (\n        id INTEGER PRIMARY KEY,",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "create_table",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def create_table():\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    cursor.execute(''' \n    CREATE TABLE IF NOT EXISTS pages (\n        id INTEGER PRIMARY KEY,\n        title TEXT,\n        content TEXT\n    )\n    ''')",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "save_page_to_db",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def save_page_to_db(page_id, title, content):\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO pages (id, title, content) VALUES (?, ?, ?)\", (page_id, title, content))\n    conn.commit()\n    conn.close()\n# Fonction pour créer la page initiale avec des boutons\ndef create_page_with_buttons():\n    # Demander à l'utilisateur le titre de la page\n    title = input(\"Entrez le titre de la page à créer: \")",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "create_page_with_buttons",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def create_page_with_buttons():\n    # Demander à l'utilisateur le titre de la page\n    title = input(\"Entrez le titre de la page à créer: \")\n    # Ajouter le style personnalisé pour le titre\n    content = f\"\"\"\n    <h1 style=\"\n        position: relative;\n        text-align: center;\n        font-size: 2.5rem;\n    \">",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "modify_existing_page",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def modify_existing_page():\n    # Lister toutes les pages existantes\n    list_all_pages()\n    page_id = int(input(\"Entrez l'ID de la page à modifier : \"))\n    # Demander à l'utilisateur ce qu'il souhaite faire\n    operation = input(\"\\nQue souhaitez-vous faire ? (ajouter/mettre à jour/supprimer un bouton) : \").strip().lower()\n    if operation == \"ajouter\":\n        add_more_buttons(page_id, [])\n    elif operation == \"mettre à jour\":\n        add_more_buttons(page_id, [])",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "list_all_pages",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def list_all_pages():\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT id, title FROM pages\")\n    pages = cursor.fetchall()\n    if pages:\n        print(\"\\nPages disponibles :\")\n        for page in pages:\n            print(f\"ID: {page[0]} | Titre: {page[1]}\")\n    else:",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "delete_page",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def delete_page():\n    page_id = int(input(\"Entrez l'ID de la page à supprimer : \"))\n    # Supprimer la page\n    delete_response = pages_endpoint.delete_page(page_id)\n    if delete_response['status'] == \"success\":\n        print(f\"Page {page_id} supprimée avec succès!\")\n        # Supprimer de la base de données\n        conn = connect_to_db()\n        cursor = conn.cursor()\n        cursor.execute(\"DELETE FROM pages WHERE id = ?\", (page_id,))",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "add_more_buttons",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def add_more_buttons(page_id, existing_buttons):\n    # Demander combien de boutons ajouter\n    num_buttons = int(input(\"Combien de boutons supplémentaires souhaitez-vous ajouter ? \"))\n    buttons = []\n    for i in range(num_buttons):\n        label = input(f\"Entrez le label du bouton {i+1} : \")\n        link = input(f\"Entrez le lien pour le bouton {i+1} : \")\n        # Ajouter le bouton à la liste\n        buttons.append(Button(\n            label=label,",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "delete_button",
        "kind": 2,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "def delete_button(page_id):\n    button_id = int(input(\"Entrez l'ID du bouton à supprimer : \"))\n    # Suppression d'un bouton (logique à adapter selon la structure du client API)\n    delete_response = pages_endpoint.delete_button_from_page(page_id, button_id)\n    if delete_response['status'] == \"success\":\n        print(f\"Le bouton {button_id} a été supprimé de la page {page_id}\")\n    else:\n        print(f\"Erreur lors de la suppression du bouton : {delete_response['message']}\")\n# Lancer la création de la page avec des boutons\ncreate_table()  # Crée la table si elle n'existe pas",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "client = WordPressApiClient(base_url=BASE_URL)\npages_endpoint = PagesEndpoint(client)\n# Fonction pour se connecter à la base de données SQLite\ndef connect_to_db():\n    conn = sqlite3.connect('pages.db')\n    return conn\n# Fonction pour créer la table si elle n'existe pas\ndef create_table():\n    conn = connect_to_db()\n    cursor = conn.cursor()",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "pages_endpoint",
        "kind": 5,
        "importPath": "interactions.pages",
        "description": "interactions.pages",
        "peekOfCode": "pages_endpoint = PagesEndpoint(client)\n# Fonction pour se connecter à la base de données SQLite\ndef connect_to_db():\n    conn = sqlite3.connect('pages.db')\n    return conn\n# Fonction pour créer la table si elle n'existe pas\ndef create_table():\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    cursor.execute(''' ",
        "detail": "interactions.pages",
        "documentation": {}
    },
    {
        "label": "generate_and_publish_articles",
        "kind": 2,
        "importPath": "interactions.posts",
        "description": "interactions.posts",
        "peekOfCode": "def generate_and_publish_articles():\n    try:\n        max_buttons = int(input(\"Combien de boutons souhaitez-vous créer sur votre Post ? \"))\n        if max_buttons <= 0:\n            print(\"Le nombre de boutons doit être supérieur à zéro.\")\n            return\n    except ValueError:\n        print(\"Veuillez entrer un nombre valide.\")\n        return\n    for i in range(1, max_buttons + 1):",
        "detail": "interactions.posts",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "interactions.posts",
        "description": "interactions.posts",
        "peekOfCode": "client = WordPressApiClient(base_url=BASE_URL)\nposts_endpoint = PostsEndpoint(client)\n# Cas d'utilisation pour générer et publier des articles\ndef generate_and_publish_articles():\n    try:\n        max_buttons = int(input(\"Combien de boutons souhaitez-vous créer sur votre Post ? \"))\n        if max_buttons <= 0:\n            print(\"Le nombre de boutons doit être supérieur à zéro.\")\n            return\n    except ValueError:",
        "detail": "interactions.posts",
        "documentation": {}
    },
    {
        "label": "posts_endpoint",
        "kind": 5,
        "importPath": "interactions.posts",
        "description": "interactions.posts",
        "peekOfCode": "posts_endpoint = PostsEndpoint(client)\n# Cas d'utilisation pour générer et publier des articles\ndef generate_and_publish_articles():\n    try:\n        max_buttons = int(input(\"Combien de boutons souhaitez-vous créer sur votre Post ? \"))\n        if max_buttons <= 0:\n            print(\"Le nombre de boutons doit être supérieur à zéro.\")\n            return\n    except ValueError:\n        print(\"Veuillez entrer un nombre valide.\")",
        "detail": "interactions.posts",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "ui.button",
        "description": "ui.button",
        "peekOfCode": "class Button(HTMLElement):\n    def __init__(self, label: str, link: str, css_class: str = \"\", styles: str = \"\", target: str = \"_self\"):\n        # Spécifie la largeur et le centrage pour chaque bouton\n        button_styles = f\"{styles} width: 320px; color: white; background-color: blue; padding: 10px 20px; text-decoration: none; border-radius: 30px; display: flex; justify-content: center; align-items: center; text-align: center; height: 50px;\"\n        super().__init__(tag=\"a\", content=label, css_class=css_class, styles=button_styles, href=link, target=target)\nclass ButtonContainer(HTMLElement):\n    def __init__(self, buttons: list[Button], styles: str = \"\"):\n        self.buttons = buttons\n        super().__init__(tag=\"div\", styles=styles)\n    def render(self) -> str:",
        "detail": "ui.button",
        "documentation": {}
    },
    {
        "label": "ButtonContainer",
        "kind": 6,
        "importPath": "ui.button",
        "description": "ui.button",
        "peekOfCode": "class ButtonContainer(HTMLElement):\n    def __init__(self, buttons: list[Button], styles: str = \"\"):\n        self.buttons = buttons\n        super().__init__(tag=\"div\", styles=styles)\n    def render(self) -> str:\n        rows = []\n        for i in range(0, len(self.buttons), 3):\n            row_buttons = self.buttons[i:i + 3]\n            row_content = \"\".join([button.render() for button in row_buttons])\n            # Gestion de l'alignement pour une ou deux colonnes",
        "detail": "ui.button",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "ui.container",
        "description": "ui.container",
        "peekOfCode": "class Container(HTMLElement):\n    def __init__(self, content: str = \"\", css_class: str = \"\", styles: str = \"\", children: list = None):\n        \"\"\"\n        Initialisation du container (div).\n        :param content: Le contenu HTML à inclure dans le div.\n        :param css_class: La classe CSS à appliquer au div.\n        :param styles: Les styles CSS en ligne à appliquer au div.\n        :param children: Liste des éléments enfants (autres objets HTMLElement).\n        \"\"\"\n        if children is None:",
        "detail": "ui.container",
        "documentation": {}
    },
    {
        "label": "HTMLElement",
        "kind": 6,
        "importPath": "ui.element",
        "description": "ui.element",
        "peekOfCode": "class HTMLElement:\n    def __init__(self, tag: str, content: str = \"\", css_class: str = \"\", styles: str = \"\", **attributes):\n        self.tag = tag\n        self.content = content\n        self.css_class = css_class\n        self.styles = styles\n        self.attributes = attributes  \n    def render(self) -> str:\n        \"\"\"\n        Génère l'élément HTML.",
        "detail": "ui.element",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "ui.image",
        "description": "ui.image",
        "peekOfCode": "class Image(HTMLElement):\n    def __init__(self, src: str, alt: str = \"\", css_class: str = \"\", styles: str = \"\"):\n        content = f'<img src=\"{src}\" alt=\"{alt}\" />'\n        super().__init__(tag=\"img\", content=content, css_class=css_class, styles=styles)\n    def render(self) -> str:\n        return super().render()",
        "detail": "ui.image",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 6,
        "importPath": "ui.text",
        "description": "ui.text",
        "peekOfCode": "class Text(HTMLElement):\n    def __init__(self, content: str, css_class: str = \"\", styles: str = \"\"):\n        super().__init__(tag=\"p\", content=content, css_class=css_class, styles=styles)\n    def render(self) -> str:\n        return super().render()",
        "detail": "ui.text",
        "documentation": {}
    },
    {
        "label": "get_auth",
        "kind": 2,
        "importPath": "auth",
        "description": "auth",
        "peekOfCode": "def get_auth():\n    user = os.getenv(\"WORDPRESS_USER\")\n    password = os.getenv(\"WORDPRESS_API_PASSWORD\")\n    if not user or not password:\n        raise ValueError(\"Les identifiants WordPress ne sont pas correctement configurés.\")\n    return HTTPBasicAuth(user, password)",
        "detail": "auth",
        "documentation": {}
    },
    {
        "label": "WordPressApiClient",
        "kind": 6,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "class WordPressApiClient:\n    def __init__(self, base_url):\n        self.base_url = base_url\n        self.auth = get_auth()\n    def create(self, endpoint, data):\n        \"\"\"\n        Crée une ressource dans WordPress.\n        \"\"\"\n        url = f\"{self.base_url}/{endpoint}\"\n        print(f\"Requête POST vers {url} avec les données : {data}\")  # Debugging.",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "BASE_URL = 'https://amungwa.online/wp-json/wp/v2'",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "WordPressAPIError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class WordPressAPIError(Exception):\n    pass\nclass AuthenticationError(WordPressAPIError):\n    pass",
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class AuthenticationError(WordPressAPIError):\n    pass",
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    print(\"Bienvenue dans l'application WordPress Page Manager!\")\n    while True:\n        choix = input(\"\\nQue souhaitez-vous faire ?\\n1. Créer une nouvelle page avec des boutons\\n2. Modifier une page existante\\n3. Supprimer une page\\n4. Lister toutes les pages disponibles\\n5. Quitter\\nVotre choix : \").strip()\n        if choix == \"1\":\n            create_page_with_buttons()  \n        elif choix == \"2\":\n            modify_existing_page()\n        elif choix == \"3\":\n            delete_page()  ",
        "detail": "main",
        "documentation": {}
    }
]